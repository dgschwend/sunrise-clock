///
/// @file		LightController.h
/// @n
/// @n @b		Project SunriseClock
/// @n @a		Developed with [embedXcode+](http://embedXcode.weebly.com)
///
/// @author		David Gschwend
///
/// @date		02.09.14 17:19
/// @copyright	(c) David Gschwend, 2014
///

/**
 * Device Driver for Main LED Light Control *
 *
 * @section Circuit
 * @code
 *                        ➚➚
 *                  .----|◀︎--- (VCC)
 *                  |
 *			    ||–-'
 * (PWMPin)-----||
 *			    ||––.
 *			 	   _|_
 *			        -   (GND)
 * @endcode
 **/

// Core library - IDE-based
#if defined(COSA)
#else // error
#error Platform not defined
#endif // end IDE

#include "Cosa/Board.hh"
#include "Cosa/Periodic.hh"
#include "Cosa/PWMPin.hh"
#include "Cosa/Types.h"

#ifndef LightController_h
#define LightController_h

static const prog_uint8_t LED_LINEARIZE[] PROGMEM = {
    0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08,
    0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B,
    0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E,
    0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12,
    0x13, 0x13, 0x14, 0x14, 0x15, 0x16, 0x16, 0x17,
    0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1B, 0x1B,
    0x1C, 0x1C, 0x1D, 0x1D, 0x1E, 0x1F, 0x1F, 0x20,
    0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
    0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
    0x31, 0x32, 0x33, 0x34, 0x36, 0x37, 0x38, 0x39,
    0x3B, 0x3C, 0x3D, 0x3E, 0x40, 0x41, 0x42, 0x43,
    0x45, 0x46, 0x47, 0x49, 0x4A, 0x4B, 0x4D, 0x4E,
    0x50, 0x51, 0x52, 0x53, 0x55, 0x56, 0x57, 0x58,
    0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61,
    0x63, 0x64, 0x65, 0x67, 0x68, 0x69, 0x6B, 0x6C,
    0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x7A, 0x7B, 0x7C, 0x7E, 0x7F,
    0x81, 0x82, 0x83, 0x85, 0x86, 0x87, 0x89, 0x8A,
    0x8C, 0x8D, 0x8E, 0x8F, 0x91, 0x92, 0x93, 0x94,
    0x96, 0x97, 0x98, 0x9A, 0x9B, 0x9C, 0x9E, 0x9F,
    0xA1, 0xA2, 0xA3, 0xA5, 0xA6, 0xA7, 0xA9, 0xAA,
    0xAC, 0xAD, 0xAF, 0xB0, 0xB2, 0xB4, 0xB5, 0xB7,
    0xB9, 0xBA, 0xBC, 0xBD, 0xBF, 0xC1, 0xC2, 0xC4,
    0xC6, 0xC7, 0xC9, 0xCB, 0xCD, 0xCE, 0xD0, 0xD2,
    0xD4, 0xD5, 0xD7, 0xD9, 0xDB, 0xDC, 0xDE, 0xE0,
    0xE2, 0xE3, 0xE5, 0xE7, 0xE9, 0xEB, 0xED, 0xEF,
    0xF1, 0xF2, 0xF4, 0xF6, 0xF8, 0xF9, 0xFD, 0xFF
};
/// @n Python 3 code for generating smooth linear supporting points for 32 input points:
/// @code
/// array = "\n"
/// points = [0, 3, 4, 5, 6, 7, 9, 12, 15, 19, 24, 28, 33, 41, 49, 59, 69, 80, 90, 99, 110, 118, 129, 140, 150, 161, 172, 185, 198, 212, 226, 241, 255]
/// for i in range(32):
///     for j in range(8):
///         array = "%s 0x%02X,"%( array, int(points[i] + (points[i+1]-points[i])/8.0*j) )
///     else:
///         array = "%s\n"%array
/// else:
///     print("static const prog_uint8_t LED_LINEARIZE[] PROGMEM = {%s};"%array)
/// @endcode


/// @brief LightController Class -- get and set duty cycle of connected LED, fade new levels
class LightController : public Periodic {
    
public:
   
    /// @brief  Constructor: Initialize new duty-cycled LED
    /// @details: PWM0 = D3, PWM1 = D5, PWM2 = D6, PWM3 = D9, PWM4 = D10, PWM5 = D11
    LightController(Board::PWMPin ledPin) : m_ledPin(ledPin), Periodic(16) {};
    
    /// @brief Set a new light Level (starts transition)
    /// @param newLevel New Light Level (0-255)
    void setLevel(uint8_t newLevel);
    
    /// @brief Set a new light Level immediately (without transition)
    /// @param newLevel New Light Level (0-255)
    void setLevelImmediately(uint8_t newLevel);
    
    /// @brief Get currently set light Level
    /// @details Returns current Light Level (0-255)
    uint8_t getLevel();
    
private:
    PWMPin  m_ledPin;
    uint8_t level;
    uint8_t curr_level;

    ///@brief Periodically called function: sweep brightness (every 16ms = 64 fps)
    virtual void run();
    
    ///@brief Conversion Function from Brigthness -> Duty Cycle (pseudo-logarithmic)
    uint8_t brightness_to_duty(uint8_t brightness);
    
};

#endif
